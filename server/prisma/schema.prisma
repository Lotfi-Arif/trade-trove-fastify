datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for Order Status
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// User model representing each user of the platform.
model User {
  id          String   @id
  firebaseUid String   @unique // Firebase UID, ensure it's unique
  email       String?  @unique // User's email, optional based on your auth method
  displayName String? // User's display name, optional
  photoURL    String? // User's photo URL, optional
  createdAt   DateTime @default(now()) // Timestamp of when the user was created
  updatedAt   DateTime @updatedAt // Timestamp of when the user was last updated
  // One User can have multiple Orders.
  orders      Order[]
  // One User can have one Cart.
  cart        Cart?
}

// Product model representing each item that can be purchased.
model Product {
  id        String   @id @default(uuid())
  name      String
  price     Float
  quantity  Int
  // One Product can be part of multiple Orders.
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
}

// Order model representing the purchase of products by a user.
model Order {
  id        String      @id @default(uuid())
  userId    String
  // Link to the User who made the Order.
  user      User        @relation(fields: [userId], references: [id])
  productId String
  // Link to the Product being ordered.
  product   Product     @relation(fields: [productId], references: [id])
  quantity  Int
  // Status of the Order.
  status    OrderStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Cart model representing a user's shopping cart.
model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  // Link to the User who owns the Cart.
  user      User      @relation(fields: [userId], references: [id])
  // One Cart can have multiple Products.
  products  Product[]
  createdAt DateTime  @default(now())
}
