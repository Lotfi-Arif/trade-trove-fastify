datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for Order Status
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id          String       @id @default(uuid())
  firebaseUid String       @unique // Firebase UID, ensure it's unique
  email       String?      @unique // User's email, optional based on your auth method
  displayName String? // User's display name, optional
  photoURL    String? // User's photo URL, optional
  createdAt   DateTime     @default(now()) // Timestamp of when the user was created
  updatedAt   DateTime     @updatedAt // Timestamp of when the user was last updated
  deletedAt   DateTime? // Soft delete (null means not deleted)
  orders      Order[] // One User can have multiple Orders.
  cart        Cart? // One User can have one Cart.
  profile     UserProfile? // Link to the user's profile for additional information
}

model UserProfile {
  id      String  @id @default(uuid())
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id])
  // Additional fields like address, phone number, etc.
  address String?
  phone   String?
}

model Product {
  id        String     @id @default(uuid())
  name      String
  price     Float
  quantity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  orders    Order[]    @relation("ProductOrders")
}

model Order {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  details   OrderDetails?
  productId String
  product   Product       @relation(fields: [productId], references: [id], name: "ProductOrders")
  quantity  Int
  status    OrderStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime? // Soft delete (null means not deleted)
}

model OrderDetails {
  id      String @id @default(uuid())
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id])
  // Additional fields like shipping address, payment method, etc.
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String // FK to Cart
  product   Product @relation(fields: [productId], references: [id])
  productId String // FK to Product
  quantity  Int // Quantity of the product in the cart

  @@id([cartId, productId]) // Composite primary key
}
